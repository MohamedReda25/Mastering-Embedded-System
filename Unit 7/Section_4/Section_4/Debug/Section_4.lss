
Section_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000045a  000004ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  000004fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f3  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e0  00000000  00000000  00001937  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000886  00000000  00000000  00002217  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00002aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000512  00000000  00000000  00002ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072b  00000000  00000000  000031de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003909  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1e 02 	call	0x43c	; 0x43c <main>
  8a:	0c 94 2b 02 	jmp	0x456	; 0x456 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MCAL_GPIO_INIT>:



void MCAL_GPIO_DEINIT( uint8_t* GPIOx){
*(GPIOx)  = (uint8_t)0x00;
*(GPIOx-1) = (uint8_t)0x00;
  92:	fb 01       	movw	r30, r22
  94:	21 81       	ldd	r18, Z+1	; 0x01
  96:	21 30       	cpi	r18, 0x01	; 1
  98:	39 f4       	brne	.+14     	; 0xa8 <MCAL_GPIO_INIT+0x16>
  9a:	20 81       	ld	r18, Z
  9c:	e8 2f       	mov	r30, r24
  9e:	f9 2f       	mov	r31, r25
  a0:	82 91       	ld	r24, -Z
  a2:	82 2b       	or	r24, r18
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret
  a8:	fb 01       	movw	r30, r22
  aa:	20 81       	ld	r18, Z
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	20 95       	com	r18
  b0:	30 95       	com	r19
  b2:	e8 2f       	mov	r30, r24
  b4:	f9 2f       	mov	r31, r25
  b6:	82 91       	ld	r24, -Z
  b8:	28 23       	and	r18, r24
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <MCAL_GPIO_WRITE_PIN>:
}



void MCAL_GPIO_WRITE_PIN(uint8_t* GPIOx, uint8_t pin_number , uint8_t value){
	if(value == GPIO_PIN_SET){
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	29 f4       	brne	.+10     	; 0xcc <MCAL_GPIO_WRITE_PIN+0xe>
		*(GPIOx) |= pin_number;
  c2:	fc 01       	movw	r30, r24
  c4:	20 81       	ld	r18, Z
  c6:	62 2b       	or	r22, r18
  c8:	60 83       	st	Z, r22
  ca:	08 95       	ret
	}
	else{
		*(GPIOx) &= ~(pin_number);
  cc:	60 95       	com	r22
  ce:	fc 01       	movw	r30, r24
  d0:	20 81       	ld	r18, Z
  d2:	62 23       	and	r22, r18
  d4:	60 83       	st	Z, r22
  d6:	08 95       	ret

000000d8 <LCD_lcd_kick>:
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	//LCD_CTRL |= (1 << EN_SWITCH);
	MCAL_GPIO_WRITE_PIN(portB,EN_SWITCH,GPIO_PIN_SET);
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	68 e0       	ldi	r22, 0x08	; 8
  dc:	88 e3       	ldi	r24, 0x38	; 56
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	83 ed       	ldi	r24, 0xD3	; 211
  e6:	90 e3       	ldi	r25, 0x30	; 48
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_lcd_kick+0x10>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_lcd_kick+0x16>
  ee:	00 00       	nop
	
	_delay_ms(50);
	
	//LCD_CTRL &= ~(1 << EN_SWITCH);
	MCAL_GPIO_WRITE_PIN(portB,EN_SWITCH,GPIO_PIN_RESET);
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	68 e0       	ldi	r22, 0x08	; 8
  f4:	88 e3       	ldi	r24, 0x38	; 56
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
  fc:	08 95       	ret

000000fe <LCD_check_lcd_isbusy>:
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_check_lcd_isbusy(){
  fe:	ef 92       	push	r14
 100:	ff 92       	push	r15
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
	#endif
	
	
	
	#ifdef FOUR_BIT_MODE
	config.Pin_number = GPIO_PIN4;
 10a:	c0 e7       	ldi	r28, 0x70	; 112
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	10 e1       	ldi	r17, 0x10	; 16
 110:	18 83       	st	Y, r17
	config.Mode = GPIO_Input;
 112:	19 82       	std	Y+1, r1	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 114:	be 01       	movw	r22, r28
 116:	8b e3       	ldi	r24, 0x3B	; 59
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = GPIO_PIN5;
 11e:	68 94       	set
 120:	ee 24       	eor	r14, r14
 122:	e5 f8       	bld	r14, 5
 124:	e8 82       	st	Y, r14
	config.Mode = GPIO_Input;
 126:	19 82       	std	Y+1, r1	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 128:	be 01       	movw	r22, r28
 12a:	8b e3       	ldi	r24, 0x3B	; 59
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = GPIO_PIN6;
 132:	68 94       	set
 134:	ff 24       	eor	r15, r15
 136:	f6 f8       	bld	r15, 6
 138:	f8 82       	st	Y, r15
	config.Mode = GPIO_Input;
 13a:	19 82       	std	Y+1, r1	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 13c:	be 01       	movw	r22, r28
 13e:	8b e3       	ldi	r24, 0x3B	; 59
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = GPIO_PIN7;
 146:	00 e8       	ldi	r16, 0x80	; 128
 148:	08 83       	st	Y, r16
	config.Mode = GPIO_Input;
 14a:	19 82       	std	Y+1, r1	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 14c:	be 01       	movw	r22, r28
 14e:	8b e3       	ldi	r24, 0x3B	; 59
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	
	
	
	//LCD_CTRL |= (1 << RW_SWITCH);
	MCAL_GPIO_WRITE_PIN(portB,RW_SWITCH,GPIO_PIN_SET);
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	64 e0       	ldi	r22, 0x04	; 4
 15a:	88 e3       	ldi	r24, 0x38	; 56
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	
	//LCD_CTRL &= ~(1 << RS_SWITCH);
	MCAL_GPIO_WRITE_PIN(portB,RS_SWITCH,GPIO_PIN_SET);
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	88 e3       	ldi	r24, 0x38	; 56
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	
	LCD_lcd_kick();
 16e:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_lcd_kick>
	MCAL_GPIO_INIT(portA,&config);
	#endif
	
	#ifdef FOUR_BIT_MODE
	
	config.Pin_number = GPIO_PIN4;
 172:	18 83       	st	Y, r17
	config.Mode = GPIO_Output;
 174:	11 e0       	ldi	r17, 0x01	; 1
 176:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 178:	be 01       	movw	r22, r28
 17a:	8b e3       	ldi	r24, 0x3B	; 59
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = GPIO_PIN5;
 182:	e8 82       	st	Y, r14
	config.Mode = GPIO_Output;
 184:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 186:	be 01       	movw	r22, r28
 188:	8b e3       	ldi	r24, 0x3B	; 59
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = GPIO_PIN6;
 190:	f8 82       	st	Y, r15
	config.Mode = GPIO_Output;
 192:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 194:	be 01       	movw	r22, r28
 196:	8b e3       	ldi	r24, 0x3B	; 59
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = GPIO_PIN7;
 19e:	08 83       	st	Y, r16
	config.Mode = GPIO_Output;
 1a0:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 1a2:	be 01       	movw	r22, r28
 1a4:	8b e3       	ldi	r24, 0x3B	; 59
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	#endif
	
	
	//LCD_CTRL &= ~(1 << RW_SWITCH);
	MCAL_GPIO_WRITE_PIN(portB,RW_SWITCH,GPIO_PIN_RESET);
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	64 e0       	ldi	r22, 0x04	; 4
 1b0:	88 e3       	ldi	r24, 0x38	; 56
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	08 95       	ret

000001c6 <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
 1c6:	cf 93       	push	r28
 1c8:	c8 2f       	mov	r28, r24
	
	_delay_ms(1);
	LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
	LCD_check_lcd_isbusy();
 1ca:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_check_lcd_isbusy>
	*(LCD_PORT) = (*(LCD_PORT) & 0x0F) | (command & 0xF0);
 1ce:	8b b3       	in	r24, 0x1b	; 27
 1d0:	8f 70       	andi	r24, 0x0F	; 15
 1d2:	9c 2f       	mov	r25, r28
 1d4:	90 7f       	andi	r25, 0xF0	; 240
 1d6:	89 2b       	or	r24, r25
 1d8:	8b bb       	out	0x1b, r24	; 27
	//LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	MCAL_GPIO_WRITE_PIN(portB,RW_SWITCH,GPIO_PIN_RESET);
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	64 e0       	ldi	r22, 0x04	; 4
 1de:	88 e3       	ldi	r24, 0x38	; 56
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(portB,RS_SWITCH,GPIO_PIN_RESET);
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	88 e3       	ldi	r24, 0x38	; 56
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	
	LCD_lcd_kick ();
 1f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_lcd_kick>
	*(LCD_PORT) = (*(LCD_PORT) & 0x0F) | (command << 4);
 1f6:	2b b3       	in	r18, 0x1b	; 27
 1f8:	30 e1       	ldi	r19, 0x10	; 16
 1fa:	c3 9f       	mul	r28, r19
 1fc:	c0 01       	movw	r24, r0
 1fe:	11 24       	eor	r1, r1
 200:	92 2f       	mov	r25, r18
 202:	9f 70       	andi	r25, 0x0F	; 15
 204:	89 2b       	or	r24, r25
 206:	8b bb       	out	0x1b, r24	; 27
	//LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	MCAL_GPIO_WRITE_PIN(portB,RW_SWITCH,GPIO_PIN_RESET);
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	64 e0       	ldi	r22, 0x04	; 4
 20c:	88 e3       	ldi	r24, 0x38	; 56
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(portB,RS_SWITCH,GPIO_PIN_RESET);
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	88 e3       	ldi	r24, 0x38	; 56
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	
	LCD_lcd_kick();
 220:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_lcd_kick>
	#endif
}
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <LCD_clear_screen>:
#include "LCD.h"

GPIO_Pinconfig_t config;

void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_WRITE_COMMAND>
 22e:	08 95       	ret

00000230 <LCD_GOTO_XY>:
	
	//LCD_CTRL &= ~(1 << EN_SWITCH);
	MCAL_GPIO_WRITE_PIN(portB,EN_SWITCH,GPIO_PIN_RESET);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	c8 2f       	mov	r28, r24
 236:	d6 2f       	mov	r29, r22
	if (line == 1)
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	31 f4       	brne	.+12     	; 0x248 <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
 23c:	60 31       	cpi	r22, 0x10	; 16
 23e:	20 f4       	brcc	.+8      	; 0x248 <LCD_GOTO_XY+0x18>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	86 0f       	add	r24, r22
 244:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 248:	c2 30       	cpi	r28, 0x02	; 2
 24a:	31 f4       	brne	.+12     	; 0x258 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 24c:	d0 31       	cpi	r29, 0x10	; 16
 24e:	20 f4       	brcc	.+8      	; 0x258 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 250:	80 ec       	ldi	r24, 0xC0	; 192
 252:	8d 0f       	add	r24, r29
 254:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_WRITE_COMMAND>
		}
	}
}
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <LCD_INIT>:

void LCD_INIT(){
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	87 e8       	ldi	r24, 0x87	; 135
 26c:	93 e1       	ldi	r25, 0x13	; 19
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_INIT+0x10>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_INIT+0x16>
 274:	00 00       	nop
	_delay_ms(20);
	//DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
	config.Pin_number = EN_SWITCH;
 276:	c0 e7       	ldi	r28, 0x70	; 112
 278:	d0 e0       	ldi	r29, 0x00	; 0
 27a:	08 e0       	ldi	r16, 0x08	; 8
 27c:	08 83       	st	Y, r16
	config.Mode = GPIO_Output;
 27e:	11 e0       	ldi	r17, 0x01	; 1
 280:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portB,&config);
 282:	be 01       	movw	r22, r28
 284:	88 e3       	ldi	r24, 0x38	; 56
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = RS_SWITCH;
 28c:	68 94       	set
 28e:	ee 24       	eor	r14, r14
 290:	e1 f8       	bld	r14, 1
 292:	e8 82       	st	Y, r14
	config.Mode = GPIO_Output;
 294:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portB,&config);
 296:	be 01       	movw	r22, r28
 298:	88 e3       	ldi	r24, 0x38	; 56
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = RW_SWITCH;
 2a0:	68 94       	set
 2a2:	ff 24       	eor	r15, r15
 2a4:	f2 f8       	bld	r15, 2
 2a6:	f8 82       	st	Y, r15
	config.Mode = GPIO_Output;
 2a8:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portB,&config);
 2aa:	be 01       	movw	r22, r28
 2ac:	88 e3       	ldi	r24, 0x38	; 56
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	
	
	//LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
	MCAL_GPIO_WRITE_PIN(portB,EN_SWITCH,GPIO_PIN_RESET);
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	68 e0       	ldi	r22, 0x08	; 8
 2b8:	88 e3       	ldi	r24, 0x38	; 56
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(portB,RS_SWITCH,GPIO_PIN_RESET);
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	62 e0       	ldi	r22, 0x02	; 2
 2c4:	88 e3       	ldi	r24, 0x38	; 56
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(portB,RW_SWITCH,GPIO_PIN_RESET);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	64 e0       	ldi	r22, 0x04	; 4
 2d0:	88 e3       	ldi	r24, 0x38	; 56
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	
	//DataDir_LCD_PORT = 0xFF;
	config.Pin_number = GPIO_PIN0;
 2d8:	18 83       	st	Y, r17
	config.Mode = GPIO_Output;
 2da:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 2dc:	be 01       	movw	r22, r28
 2de:	8b e3       	ldi	r24, 0x3B	; 59
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = GPIO_PIN1;
 2e6:	e8 82       	st	Y, r14
	config.Mode = GPIO_Output;
 2e8:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 2ea:	be 01       	movw	r22, r28
 2ec:	8b e3       	ldi	r24, 0x3B	; 59
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = GPIO_PIN2;
 2f4:	f8 82       	st	Y, r15
	config.Mode = GPIO_Output;
 2f6:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 2f8:	be 01       	movw	r22, r28
 2fa:	8b e3       	ldi	r24, 0x3B	; 59
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = GPIO_PIN3;
 302:	08 83       	st	Y, r16
	config.Mode = GPIO_Output;
 304:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 306:	be 01       	movw	r22, r28
 308:	8b e3       	ldi	r24, 0x3B	; 59
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	
	config.Pin_number = GPIO_PIN4;
 310:	80 e1       	ldi	r24, 0x10	; 16
 312:	88 83       	st	Y, r24
	config.Mode = GPIO_Output;
 314:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 316:	be 01       	movw	r22, r28
 318:	8b e3       	ldi	r24, 0x3B	; 59
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = GPIO_PIN5;
 320:	80 e2       	ldi	r24, 0x20	; 32
 322:	88 83       	st	Y, r24
	config.Mode = GPIO_Output;
 324:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 326:	be 01       	movw	r22, r28
 328:	8b e3       	ldi	r24, 0x3B	; 59
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = GPIO_PIN6;
 330:	80 e4       	ldi	r24, 0x40	; 64
 332:	88 83       	st	Y, r24
	config.Mode = GPIO_Output;
 334:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 336:	be 01       	movw	r22, r28
 338:	8b e3       	ldi	r24, 0x3B	; 59
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
	
	config.Pin_number = GPIO_PIN7;
 340:	80 e8       	ldi	r24, 0x80	; 128
 342:	88 83       	st	Y, r24
	config.Mode = GPIO_Output;
 344:	19 83       	std	Y+1, r17	; 0x01
	MCAL_GPIO_INIT(portA,&config);
 346:	be 01       	movw	r22, r28
 348:	8b e3       	ldi	r24, 0x3B	; 59
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 49 00 	call	0x92	; 0x92 <MCAL_GPIO_INIT>
 350:	85 ea       	ldi	r24, 0xA5	; 165
 352:	9e e0       	ldi	r25, 0x0E	; 14
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <LCD_INIT+0xf6>
 358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_INIT+0xfc>
 35a:	00 00       	nop
	
	
	_delay_ms(15);
	LCD_clear_screen();
 35c:	0e 94 14 01 	call	0x228	; 0x228 <LCD_clear_screen>
	//LCD_WRITE_COMMAND(0x02);		/* send for 4 bit initialization of LCD  */
	//LCD_WRITE_COMMAND(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
	//LCD_WRITE_COMMAND(0x0c);              /* Display on cursor off*/
	//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
	//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 366:	88 e2       	ldi	r24, 0x28	; 40
 368:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_WRITE_COMMAND>
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 36c:	86 e0       	ldi	r24, 0x06	; 6
 36e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 372:	80 e8       	ldi	r24, 0x80	; 128
 374:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 378:	8f e0       	ldi	r24, 0x0F	; 15
 37a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_WRITE_COMMAND>
}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	ff 90       	pop	r15
 388:	ef 90       	pop	r14
 38a:	08 95       	ret

0000038c <LCD_WRITE_CHAR>:
	
	LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 38c:	cf 93       	push	r28
 38e:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
	//LCD_check_lcd_isbusy();
	*(LCD_PORT) = (*(LCD_PORT) & 0x0F) | (character & 0xF0);
 390:	8b b3       	in	r24, 0x1b	; 27
 392:	8f 70       	andi	r24, 0x0F	; 15
 394:	9c 2f       	mov	r25, r28
 396:	90 7f       	andi	r25, 0xF0	; 240
 398:	89 2b       	or	r24, r25
 39a:	8b bb       	out	0x1b, r24	; 27
	
	//LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
	MCAL_GPIO_WRITE_PIN(portB,RS_SWITCH,GPIO_PIN_SET);
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	62 e0       	ldi	r22, 0x02	; 2
 3a0:	88 e3       	ldi	r24, 0x38	; 56
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	
	//LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	MCAL_GPIO_WRITE_PIN(portB,RW_SWITCH,GPIO_PIN_RESET);
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	64 e0       	ldi	r22, 0x04	; 4
 3ac:	88 e3       	ldi	r24, 0x38	; 56
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	
	
	LCD_lcd_kick();
 3b4:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_lcd_kick>
	
	*(LCD_PORT) = (*(LCD_PORT) & 0x0F) | (character << 4);
 3b8:	2b b3       	in	r18, 0x1b	; 27
 3ba:	30 e1       	ldi	r19, 0x10	; 16
 3bc:	c3 9f       	mul	r28, r19
 3be:	c0 01       	movw	r24, r0
 3c0:	11 24       	eor	r1, r1
 3c2:	92 2f       	mov	r25, r18
 3c4:	9f 70       	andi	r25, 0x0F	; 15
 3c6:	89 2b       	or	r24, r25
 3c8:	8b bb       	out	0x1b, r24	; 27
	
	//LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
	MCAL_GPIO_WRITE_PIN(portB,RS_SWITCH,GPIO_PIN_SET);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	62 e0       	ldi	r22, 0x02	; 2
 3ce:	88 e3       	ldi	r24, 0x38	; 56
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	
	//LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	MCAL_GPIO_WRITE_PIN(portB,RW_SWITCH,GPIO_PIN_RESET);
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	64 e0       	ldi	r22, 0x04	; 4
 3da:	88 e3       	ldi	r24, 0x38	; 56
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 5f 00 	call	0xbe	; 0xbe <MCAL_GPIO_WRITE_PIN>
	
	LCD_lcd_kick ();
 3e2:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_lcd_kick>
	#endif
}
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	8c 01       	movw	r16, r24
	int count = 0;
 3f4:	c0 e0       	ldi	r28, 0x00	; 0
 3f6:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 3f8:	18 c0       	rjmp	.+48     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		count++;
 3fa:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 3fc:	0f 5f       	subi	r16, 0xFF	; 255
 3fe:	1f 4f       	sbci	r17, 0xFF	; 255
 400:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_WRITE_CHAR>
		if (count == 16)
 404:	c0 31       	cpi	r28, 0x10	; 16
 406:	d1 05       	cpc	r29, r1
 408:	29 f4       	brne	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		{
			LCD_GOTO_XY(2,0);
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	0e 94 18 01 	call	0x230	; 0x230 <LCD_GOTO_XY>
 412:	0b c0       	rjmp	.+22     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		}
		else if (count == 32)
 414:	c0 32       	cpi	r28, 0x20	; 32
 416:	d1 05       	cpc	r29, r1
 418:	41 f4       	brne	.+16     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		{
			LCD_clear_screen();
 41a:	0e 94 14 01 	call	0x228	; 0x228 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 18 01 	call	0x230	; 0x230 <LCD_GOTO_XY>
			count = 0;
 426:	c0 e0       	ldi	r28, 0x00	; 0
 428:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 42a:	f8 01       	movw	r30, r16
 42c:	80 81       	ld	r24, Z
 42e:	81 11       	cpse	r24, r1
 430:	e4 cf       	rjmp	.-56     	; 0x3fa <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	1f 91       	pop	r17
 438:	0f 91       	pop	r16
 43a:	08 95       	ret

0000043c <main>:

GPIO_Pinconfig_t config;
int main(void)
{

	LCD_INIT();
 43c:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_INIT>
 440:	83 ed       	ldi	r24, 0xD3	; 211
 442:	90 e3       	ldi	r25, 0x30	; 48
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <main+0x8>
 448:	00 c0       	rjmp	.+0      	; 0x44a <main+0xe>
 44a:	00 00       	nop
	_delay_ms(50);
	LCD_WRITE_STRING("LEARN IN DEPTH");	
 44c:	80 e6       	ldi	r24, 0x60	; 96
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_WRITE_STRING>
 454:	ff cf       	rjmp	.-2      	; 0x454 <main+0x18>

00000456 <_exit>:
 456:	f8 94       	cli

00000458 <__stop_program>:
 458:	ff cf       	rjmp	.-2      	; 0x458 <__stop_program>
