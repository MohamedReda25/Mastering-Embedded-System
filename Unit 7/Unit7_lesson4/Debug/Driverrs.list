
Driverrs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e88  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000fb8  08000fb8  00010fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fe0  08000fe0  00010fe8  2**0
                  CONTENTS
  4 .ARM          00000000  08000fe0  08000fe0  00010fe8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fe0  08000fe8  00010fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fe0  08000fe0  00010fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fe4  08000fe4  00010fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000fe8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000fe8  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fe8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000344d  00000000  00000000  00011011  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000870  00000000  00000000  0001445e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009fd  00000000  00000000  00014cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  000156d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00015878  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002994  00000000  00000000  000159d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001bff  00000000  00000000  0001836c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a655  00000000  00000000  00019f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000245c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000054c  00000000  00000000  0002463c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fa0 	.word	0x08000fa0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000fa0 	.word	0x08000fa0

08000170 <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d854      	bhi.n	800022a <Enable_NVIC+0xba>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <Enable_NVIC+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001d7 	.word	0x080001d7
 8000190:	080001e5 	.word	0x080001e5
 8000194:	080001f3 	.word	0x080001f3
 8000198:	08000201 	.word	0x08000201
 800019c:	0800020f 	.word	0x0800020f
 80001a0:	0800020f 	.word	0x0800020f
 80001a4:	0800020f 	.word	0x0800020f
 80001a8:	0800020f 	.word	0x0800020f
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	0800021d 	.word	0x0800021d
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	0800021d 	.word	0x0800021d
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	0800021d 	.word	0x0800021d
 80001c4:	0800021d 	.word	0x0800021d
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <Enable_NVIC+0xc4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a19      	ldr	r2, [pc, #100]	; (8000234 <Enable_NVIC+0xc4>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
		break;
 80001d4:	e029      	b.n	800022a <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <Enable_NVIC+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a16      	ldr	r2, [pc, #88]	; (8000234 <Enable_NVIC+0xc4>)
 80001dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e0:	6013      	str	r3, [r2, #0]
		break;
 80001e2:	e022      	b.n	800022a <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <Enable_NVIC+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <Enable_NVIC+0xc4>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
		break;
 80001f0:	e01b      	b.n	800022a <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <Enable_NVIC+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <Enable_NVIC+0xc4>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
		break;
 80001fe:	e014      	b.n	800022a <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <Enable_NVIC+0xc4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <Enable_NVIC+0xc4>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
		break;
 800020c:	e00d      	b.n	800022a <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <Enable_NVIC+0xc4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <Enable_NVIC+0xc4>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000218:	6013      	str	r3, [r2, #0]
		break;
 800021a:	e006      	b.n	800022a <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <Enable_NVIC+0xc8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <Enable_NVIC+0xc8>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6013      	str	r3, [r2, #0]
		break;
 8000228:	bf00      	nop
	}


}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000e104 	.word	0xe000e104

0800023c <Disable_NVIC>:
void Disable_NVIC(uint16_t IRQ){
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <Disable_NVIC+0xba>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <Disable_NVIC+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000295 	.word	0x08000295
 8000258:	080002a3 	.word	0x080002a3
 800025c:	080002b1 	.word	0x080002b1
 8000260:	080002bf 	.word	0x080002bf
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002db 	.word	0x080002db
 800026c:	080002db 	.word	0x080002db
 8000270:	080002db 	.word	0x080002db
 8000274:	080002db 	.word	0x080002db
 8000278:	080002db 	.word	0x080002db
 800027c:	080002e9 	.word	0x080002e9
 8000280:	080002e9 	.word	0x080002e9
 8000284:	080002e9 	.word	0x080002e9
 8000288:	080002e9 	.word	0x080002e9
 800028c:	080002e9 	.word	0x080002e9
 8000290:	080002e9 	.word	0x080002e9
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <Disable_NVIC+0xc4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <Disable_NVIC+0xc4>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029e:	6013      	str	r3, [r2, #0]
		break;
 80002a0:	e029      	b.n	80002f6 <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <Disable_NVIC+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <Disable_NVIC+0xc4>)
 80002a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ac:	6013      	str	r3, [r2, #0]
		break;
 80002ae:	e022      	b.n	80002f6 <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <Disable_NVIC+0xc4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <Disable_NVIC+0xc4>)
 80002b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ba:	6013      	str	r3, [r2, #0]
		break;
 80002bc:	e01b      	b.n	80002f6 <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <Disable_NVIC+0xc4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <Disable_NVIC+0xc4>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6013      	str	r3, [r2, #0]
		break;
 80002ca:	e014      	b.n	80002f6 <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <Disable_NVIC+0xc4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <Disable_NVIC+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6013      	str	r3, [r2, #0]
		break;
 80002d8:	e00d      	b.n	80002f6 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <Disable_NVIC+0xc4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a08      	ldr	r2, [pc, #32]	; (8000300 <Disable_NVIC+0xc4>)
 80002e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e4:	6013      	str	r3, [r2, #0]
		break;
 80002e6:	e006      	b.n	80002f6 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <Disable_NVIC+0xc8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <Disable_NVIC+0xc8>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
		break;
 80002f4:	bf00      	nop
	}


}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e180 	.word	0xe000e180
 8000304:	e000e184 	.word	0xe000e184

08000308 <UPDATE_EXTI>:





void UPDATE_EXTI(EXTI_Pinconfig_t* EXTI_config){
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]

	//1- Configure GPIO to be AF input-> Floating input
	GPIO_Pinconfig_t PinCfg;
	PinCfg.Pin_number =EXTI_config->EXTI_PIN.GPIO_PIN;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	891b      	ldrh	r3, [r3, #8]
 8000314:	813b      	strh	r3, [r7, #8]
	PinCfg.Mode = GPIO_MODE_INPUT_FLO;
 8000316:	2301      	movs	r3, #1
 8000318:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_INIT(EXTI_config->EXTI_PIN.GPIO_PORT, &PinCfg);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	f107 0208 	add.w	r2, r7, #8
 8000322:	4611      	mov	r1, r2
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fa56 	bl	80007d6 <MCAL_GPIO_INIT>



	//2- UPDATE AFIO to Route between EXTI lines with Ports A,B,C,D
	uint8_t AFIO_EXTICR_index = EXTI_config->EXTI_PIN.ETI_InputLineNumber / 4;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	089b      	lsrs	r3, r3, #2
 8000330:	b29b      	uxth	r3, r3
 8000332:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position = (EXTI_config->EXTI_PIN.ETI_InputLineNumber % 4) *4;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	f003 0303 	and.w	r3, r3, #3
 800033e:	b2db      	uxtb	r3, r3
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	73bb      	strb	r3, [r7, #14]

	//Clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_position) ;
 8000344:	4a5d      	ldr	r2, [pc, #372]	; (80004bc <UPDATE_EXTI+0x1b4>)
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	3302      	adds	r3, #2
 800034a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034e:	7bbb      	ldrb	r3, [r7, #14]
 8000350:	210f      	movs	r1, #15
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43db      	mvns	r3, r3
 8000358:	4618      	mov	r0, r3
 800035a:	4958      	ldr	r1, [pc, #352]	; (80004bc <UPDATE_EXTI+0x1b4>)
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	4002      	ands	r2, r0
 8000360:	3302      	adds	r3, #2
 8000362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_config->EXTI_PIN.GPIO_PORT) &0xF) << AFIO_EXTICR_position );
 8000366:	4a55      	ldr	r2, [pc, #340]	; (80004bc <UPDATE_EXTI+0x1b4>)
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	3302      	adds	r3, #2
 800036c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4952      	ldr	r1, [pc, #328]	; (80004c0 <UPDATE_EXTI+0x1b8>)
 8000376:	428b      	cmp	r3, r1
 8000378:	d016      	beq.n	80003a8 <UPDATE_EXTI+0xa0>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	4951      	ldr	r1, [pc, #324]	; (80004c4 <UPDATE_EXTI+0x1bc>)
 8000380:	428b      	cmp	r3, r1
 8000382:	d00f      	beq.n	80003a4 <UPDATE_EXTI+0x9c>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	494f      	ldr	r1, [pc, #316]	; (80004c8 <UPDATE_EXTI+0x1c0>)
 800038a:	428b      	cmp	r3, r1
 800038c:	d008      	beq.n	80003a0 <UPDATE_EXTI+0x98>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	494e      	ldr	r1, [pc, #312]	; (80004cc <UPDATE_EXTI+0x1c4>)
 8000394:	428b      	cmp	r3, r1
 8000396:	d101      	bne.n	800039c <UPDATE_EXTI+0x94>
 8000398:	2303      	movs	r3, #3
 800039a:	e006      	b.n	80003aa <UPDATE_EXTI+0xa2>
 800039c:	2300      	movs	r3, #0
 800039e:	e004      	b.n	80003aa <UPDATE_EXTI+0xa2>
 80003a0:	2302      	movs	r3, #2
 80003a2:	e002      	b.n	80003aa <UPDATE_EXTI+0xa2>
 80003a4:	2301      	movs	r3, #1
 80003a6:	e000      	b.n	80003aa <UPDATE_EXTI+0xa2>
 80003a8:	2300      	movs	r3, #0
 80003aa:	7bb9      	ldrb	r1, [r7, #14]
 80003ac:	408b      	lsls	r3, r1
 80003ae:	4618      	mov	r0, r3
 80003b0:	4942      	ldr	r1, [pc, #264]	; (80004bc <UPDATE_EXTI+0x1b4>)
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	4302      	orrs	r2, r0
 80003b6:	3302      	adds	r3, #2
 80003b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//3- Update Rising or Falling Register
	EXTI->RTSR &= ~(1<< EXTI_config->EXTI_PIN.ETI_InputLineNumber);
 80003bc:	4b44      	ldr	r3, [pc, #272]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	8812      	ldrh	r2, [r2, #0]
 80003c4:	4611      	mov	r1, r2
 80003c6:	2201      	movs	r2, #1
 80003c8:	408a      	lsls	r2, r1
 80003ca:	43d2      	mvns	r2, r2
 80003cc:	4611      	mov	r1, r2
 80003ce:	4a40      	ldr	r2, [pc, #256]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 80003d0:	400b      	ands	r3, r1
 80003d2:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<< EXTI_config->EXTI_PIN.ETI_InputLineNumber);
 80003d4:	4b3e      	ldr	r3, [pc, #248]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	8812      	ldrh	r2, [r2, #0]
 80003dc:	4611      	mov	r1, r2
 80003de:	2201      	movs	r2, #1
 80003e0:	408a      	lsls	r2, r1
 80003e2:	43d2      	mvns	r2, r2
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a3a      	ldr	r2, [pc, #232]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 80003e8:	400b      	ands	r3, r1
 80003ea:	60d3      	str	r3, [r2, #12]

	if(EXTI_config->Trigger_case == EXTI_Trigger_Rising){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	7b1b      	ldrb	r3, [r3, #12]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10b      	bne.n	800040c <UPDATE_EXTI+0x104>
		EXTI->RTSR |= (1<< EXTI_config->EXTI_PIN.ETI_InputLineNumber);
 80003f4:	4b36      	ldr	r3, [pc, #216]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	8812      	ldrh	r2, [r2, #0]
 80003fc:	4611      	mov	r1, r2
 80003fe:	2201      	movs	r2, #1
 8000400:	408a      	lsls	r2, r1
 8000402:	4611      	mov	r1, r2
 8000404:	4a32      	ldr	r2, [pc, #200]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 8000406:	430b      	orrs	r3, r1
 8000408:	6093      	str	r3, [r2, #8]
 800040a:	e025      	b.n	8000458 <UPDATE_EXTI+0x150>
	}
	else if(EXTI_config->Trigger_case == EXTI_Trigger_Falling){
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	7b1b      	ldrb	r3, [r3, #12]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d10b      	bne.n	800042c <UPDATE_EXTI+0x124>
		EXTI->FTSR |= (1<< EXTI_config->EXTI_PIN.ETI_InputLineNumber);
 8000414:	4b2e      	ldr	r3, [pc, #184]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4611      	mov	r1, r2
 800041e:	2201      	movs	r2, #1
 8000420:	408a      	lsls	r2, r1
 8000422:	4611      	mov	r1, r2
 8000424:	4a2a      	ldr	r2, [pc, #168]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 8000426:	430b      	orrs	r3, r1
 8000428:	60d3      	str	r3, [r2, #12]
 800042a:	e015      	b.n	8000458 <UPDATE_EXTI+0x150>
	}
	else{
		EXTI->RTSR |= (1<< EXTI_config->EXTI_PIN.ETI_InputLineNumber);
 800042c:	4b28      	ldr	r3, [pc, #160]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	8812      	ldrh	r2, [r2, #0]
 8000434:	4611      	mov	r1, r2
 8000436:	2201      	movs	r2, #1
 8000438:	408a      	lsls	r2, r1
 800043a:	4611      	mov	r1, r2
 800043c:	4a24      	ldr	r2, [pc, #144]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 800043e:	430b      	orrs	r3, r1
 8000440:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<< EXTI_config->EXTI_PIN.ETI_InputLineNumber);
 8000442:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	8812      	ldrh	r2, [r2, #0]
 800044a:	4611      	mov	r1, r2
 800044c:	2201      	movs	r2, #1
 800044e:	408a      	lsls	r2, r1
 8000450:	4611      	mov	r1, r2
 8000452:	4a1f      	ldr	r2, [pc, #124]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 8000454:	430b      	orrs	r3, r1
 8000456:	60d3      	str	r3, [r2, #12]
	}

	//4- Update IRQ Handling callback
	GP_IRQ_Callback[EXTI_config->EXTI_PIN.ETI_InputLineNumber] = EXTI_config->P_IRQ_Callback;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	4619      	mov	r1, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	691b      	ldr	r3, [r3, #16]
 8000462:	4a1c      	ldr	r2, [pc, #112]	; (80004d4 <UPDATE_EXTI+0x1cc>)
 8000464:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//5- Enable/Disable IRQ EXTI and NVIC
	if(EXTI_config->IRQ_EN == EXTI_IRQ_Enable){
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	7b5b      	ldrb	r3, [r3, #13]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d110      	bne.n	8000492 <UPDATE_EXTI+0x18a>
		EXTI->IMR |= (1<<EXTI_config->EXTI_PIN.ETI_InputLineNumber);
 8000470:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	8812      	ldrh	r2, [r2, #0]
 8000478:	4611      	mov	r1, r2
 800047a:	2201      	movs	r2, #1
 800047c:	408a      	lsls	r2, r1
 800047e:	4611      	mov	r1, r2
 8000480:	4a13      	ldr	r2, [pc, #76]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 8000482:	430b      	orrs	r3, r1
 8000484:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_config->EXTI_PIN.ETI_InputLineNumber);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff fe70 	bl	8000170 <Enable_NVIC>
		EXTI->IMR &= ~(1<<EXTI_config->EXTI_PIN.ETI_InputLineNumber);
		Disable_NVIC(EXTI_config->EXTI_PIN.ETI_InputLineNumber);
	}


}
 8000490:	e010      	b.n	80004b4 <UPDATE_EXTI+0x1ac>
		EXTI->IMR &= ~(1<<EXTI_config->EXTI_PIN.ETI_InputLineNumber);
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	8812      	ldrh	r2, [r2, #0]
 800049a:	4611      	mov	r1, r2
 800049c:	2201      	movs	r2, #1
 800049e:	408a      	lsls	r2, r1
 80004a0:	43d2      	mvns	r2, r2
 80004a2:	4611      	mov	r1, r2
 80004a4:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <UPDATE_EXTI+0x1c8>)
 80004a6:	400b      	ands	r3, r1
 80004a8:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_config->EXTI_PIN.ETI_InputLineNumber);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff fec4 	bl	800023c <Disable_NVIC>
}
 80004b4:	bf00      	nop
 80004b6:	3710      	adds	r7, #16
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40010000 	.word	0x40010000
 80004c0:	40010800 	.word	0x40010800
 80004c4:	40010c00 	.word	0x40010c00
 80004c8:	40011000 	.word	0x40011000
 80004cc:	40011400 	.word	0x40011400
 80004d0:	40010400 	.word	0x40010400
 80004d4:	20000020 	.word	0x20000020

080004d8 <MCAL_EXTI_GPIO_INIT>:
 * @param [in]      - EXTI_config: set bt @ref : EXTI_define , EXTI_Trigger_define , EXTI_IRQ_define
 * @retval          - none
 * Note             -
 *================================================================ */

void MCAL_EXTI_GPIO_INIT(EXTI_Pinconfig_t* EXTI_config){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

	UPDATE_EXTI(EXTI_config);
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f7ff ff11 	bl	8000308 <UPDATE_EXTI>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <EXTI0_IRQHandler>:



//IRQ_Handler

void EXTI0_IRQHandler(void){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXTI->PR |= (1<<0);
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <EXTI0_IRQHandler+0x1c>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <EXTI0_IRQHandler+0x1c>)
 80004fa:	f043 0301 	orr.w	r3, r3, #1
 80004fe:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <EXTI0_IRQHandler+0x20>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4798      	blx	r3
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40010400 	.word	0x40010400
 8000510:	20000020 	.word	0x20000020

08000514 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <EXTI1_IRQHandler+0x1c>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <EXTI1_IRQHandler+0x1c>)
 800051e:	f043 0302 	orr.w	r3, r3, #2
 8000522:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <EXTI1_IRQHandler+0x20>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	4798      	blx	r3

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40010400 	.word	0x40010400
 8000534:	20000020 	.word	0x20000020

08000538 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <EXTI2_IRQHandler+0x1c>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <EXTI2_IRQHandler+0x1c>)
 8000542:	f043 0304 	orr.w	r3, r3, #4
 8000546:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <EXTI2_IRQHandler+0x20>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	4798      	blx	r3
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40010400 	.word	0x40010400
 8000558:	20000020 	.word	0x20000020

0800055c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <EXTI3_IRQHandler+0x1c>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <EXTI3_IRQHandler+0x1c>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <EXTI3_IRQHandler+0x20>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	4798      	blx	r3
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40010400 	.word	0x40010400
 800057c:	20000020 	.word	0x20000020

08000580 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <EXTI4_IRQHandler+0x1c>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <EXTI4_IRQHandler+0x1c>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <EXTI4_IRQHandler+0x20>)
 8000592:	691b      	ldr	r3, [r3, #16]
 8000594:	4798      	blx	r3
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40010400 	.word	0x40010400
 80005a0:	20000020 	.word	0x20000020

080005a4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); GP_IRQ_Callback[5]();  }
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	f003 0320 	and.w	r3, r3, #32
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d008      	beq.n	80005c6 <EXTI9_5_IRQHandler+0x22>
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a22      	ldr	r2, [pc, #136]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 80005ba:	f043 0320 	orr.w	r3, r3, #32
 80005be:	6153      	str	r3, [r2, #20]
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <EXTI9_5_IRQHandler+0xa4>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); GP_IRQ_Callback[6]();  }
 80005c6:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d008      	beq.n	80005e4 <EXTI9_5_IRQHandler+0x40>
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 80005d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <EXTI9_5_IRQHandler+0xa4>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); GP_IRQ_Callback[7]();  }
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d008      	beq.n	8000602 <EXTI9_5_IRQHandler+0x5e>
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a13      	ldr	r2, [pc, #76]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 80005f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005fa:	6153      	str	r3, [r2, #20]
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <EXTI9_5_IRQHandler+0xa4>)
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); GP_IRQ_Callback[8]();  }
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800060a:	2b00      	cmp	r3, #0
 800060c:	d008      	beq.n	8000620 <EXTI9_5_IRQHandler+0x7c>
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 8000614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <EXTI9_5_IRQHandler+0xa4>)
 800061c:	6a1b      	ldr	r3, [r3, #32]
 800061e:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); GP_IRQ_Callback[9]();  }
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000628:	2b00      	cmp	r3, #0
 800062a:	d008      	beq.n	800063e <EXTI9_5_IRQHandler+0x9a>
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <EXTI9_5_IRQHandler+0xa0>)
 8000632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000636:	6153      	str	r3, [r2, #20]
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <EXTI9_5_IRQHandler+0xa4>)
 800063a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063c:	4798      	blx	r3
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40010400 	.word	0x40010400
 8000648:	20000020 	.word	0x20000020

0800064c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); GP_IRQ_Callback[10]();  }
 8000650:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000658:	2b00      	cmp	r3, #0
 800065a:	d008      	beq.n	800066e <EXTI15_10_IRQHandler+0x22>
 800065c:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4a29      	ldr	r2, [pc, #164]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 8000662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000666:	6153      	str	r3, [r2, #20]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <EXTI15_10_IRQHandler+0xc0>)
 800066a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800066c:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); GP_IRQ_Callback[11]();  }
 800066e:	4b26      	ldr	r3, [pc, #152]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000676:	2b00      	cmp	r3, #0
 8000678:	d008      	beq.n	800068c <EXTI15_10_IRQHandler+0x40>
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4a22      	ldr	r2, [pc, #136]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 8000680:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000684:	6153      	str	r3, [r2, #20]
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <EXTI15_10_IRQHandler+0xc0>)
 8000688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068a:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); GP_IRQ_Callback[12]();  }
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000694:	2b00      	cmp	r3, #0
 8000696:	d008      	beq.n	80006aa <EXTI15_10_IRQHandler+0x5e>
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	4a1a      	ldr	r2, [pc, #104]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 800069e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006a2:	6153      	str	r3, [r2, #20]
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <EXTI15_10_IRQHandler+0xc0>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); GP_IRQ_Callback[13]();  }
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d008      	beq.n	80006c8 <EXTI15_10_IRQHandler+0x7c>
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 80006bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <EXTI15_10_IRQHandler+0xc0>)
 80006c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c6:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); GP_IRQ_Callback[14]();  }
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d008      	beq.n	80006e6 <EXTI15_10_IRQHandler+0x9a>
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006de:	6153      	str	r3, [r2, #20]
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <EXTI15_10_IRQHandler+0xc0>)
 80006e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e4:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) {EXTI->PR |= (1<<15); GP_IRQ_Callback[15]();  }
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d008      	beq.n	8000704 <EXTI15_10_IRQHandler+0xb8>
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <EXTI15_10_IRQHandler+0xbc>)
 80006f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4b03      	ldr	r3, [pc, #12]	; (800070c <EXTI15_10_IRQHandler+0xc0>)
 8000700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000702:	4798      	blx	r3

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40010400 	.word	0x40010400
 800070c:	20000020 	.word	0x20000020

08000710 <getposition>:
//Eng. Mohamed Gamal

#include "STM32F103x8.h"
#include "stm32f103x8_GPIO_driver.h"

uint8_t getposition(uint16_t pin_num){
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == GPIOx_PIN0){
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d101      	bne.n	8000724 <getposition+0x14>
		rval =0;
 8000720:	2300      	movs	r3, #0
 8000722:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN1){
 8000724:	88fb      	ldrh	r3, [r7, #6]
 8000726:	2b02      	cmp	r3, #2
 8000728:	d101      	bne.n	800072e <getposition+0x1e>
		rval =4;
 800072a:	2304      	movs	r3, #4
 800072c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN2){
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	2b04      	cmp	r3, #4
 8000732:	d101      	bne.n	8000738 <getposition+0x28>
		rval =8;
 8000734:	2308      	movs	r3, #8
 8000736:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN3){
 8000738:	88fb      	ldrh	r3, [r7, #6]
 800073a:	2b08      	cmp	r3, #8
 800073c:	d101      	bne.n	8000742 <getposition+0x32>
		rval =12;
 800073e:	230c      	movs	r3, #12
 8000740:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN4){
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	2b10      	cmp	r3, #16
 8000746:	d101      	bne.n	800074c <getposition+0x3c>
		rval =16;
 8000748:	2310      	movs	r3, #16
 800074a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN5){
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	2b20      	cmp	r3, #32
 8000750:	d101      	bne.n	8000756 <getposition+0x46>
		rval =20;
 8000752:	2314      	movs	r3, #20
 8000754:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN6){
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	2b40      	cmp	r3, #64	; 0x40
 800075a:	d101      	bne.n	8000760 <getposition+0x50>
		rval =24;
 800075c:	2318      	movs	r3, #24
 800075e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN7){
 8000760:	88fb      	ldrh	r3, [r7, #6]
 8000762:	2b80      	cmp	r3, #128	; 0x80
 8000764:	d101      	bne.n	800076a <getposition+0x5a>
		rval =28;
 8000766:	231c      	movs	r3, #28
 8000768:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN8){
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000770:	d101      	bne.n	8000776 <getposition+0x66>
		rval =0;
 8000772:	2300      	movs	r3, #0
 8000774:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN9){
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800077c:	d101      	bne.n	8000782 <getposition+0x72>
		rval =4;
 800077e:	2304      	movs	r3, #4
 8000780:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN10){
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000788:	d101      	bne.n	800078e <getposition+0x7e>
		rval =8;
 800078a:	2308      	movs	r3, #8
 800078c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN11){
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000794:	d101      	bne.n	800079a <getposition+0x8a>
		rval =12;
 8000796:	230c      	movs	r3, #12
 8000798:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN12){
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007a0:	d101      	bne.n	80007a6 <getposition+0x96>
		rval =16;
 80007a2:	2310      	movs	r3, #16
 80007a4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN13){
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ac:	d101      	bne.n	80007b2 <getposition+0xa2>
		rval =20;
 80007ae:	2314      	movs	r3, #20
 80007b0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN14){
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007b8:	d101      	bne.n	80007be <getposition+0xae>
		rval =24;
 80007ba:	2318      	movs	r3, #24
 80007bc:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == GPIOx_PIN15){
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007c4:	d101      	bne.n	80007ca <getposition+0xba>
		rval =28;
 80007c6:	231c      	movs	r3, #28
 80007c8:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 80007ca:	7bfb      	ldrb	r3, [r7, #15]


}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr

080007d6 <MCAL_GPIO_INIT>:
 * @retval          - none
 * Note             - Stm32F103C6 MCU Has GPIO (A,B,C,D,E) modules
 * 					  But LQFP48 has only GPIO A,B,Part of C\D exported as external PINS from MCU
 *================================================================ */
void MCAL_GPIO_INIT(GPIO_Typedef* GPIOx , GPIO_Pinconfig_t* pin_config)
{
 80007d6:	b590      	push	{r4, r7, lr}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	6039      	str	r1, [r7, #0]
	volatile uint32_t* config = NULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]

	config = (pin_config->Pin_number < GPIOx_PIN8 )? &GPIOx->CRL : &GPIOx->CRH;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	2bff      	cmp	r3, #255	; 0xff
 80007f0:	d801      	bhi.n	80007f6 <MCAL_GPIO_INIT+0x20>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	e001      	b.n	80007fa <MCAL_GPIO_INIT+0x24>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3304      	adds	r3, #4
 80007fa:	60bb      	str	r3, [r7, #8]

	(*config) &= ~(0xf << getposition(pin_config->Pin_number) );
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	b29b      	uxth	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff84 	bl	8000710 <getposition>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	230f      	movs	r3, #15
 800080e:	4093      	lsls	r3, r2
 8000810:	43da      	mvns	r2, r3
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	401a      	ands	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	601a      	str	r2, [r3, #0]

	if ( ((pin_config->Mode)== GPIO_MODE_OUTPUT_AF_OD) ||  ((pin_config->Mode)== GPIO_MODE_OUTPUT_AF_PP) || ((pin_config->Mode)== GPIO_MODE_OUTPUT_OD) || ( (pin_config->Mode)== GPIO_MODE_OUTPUT_PP) )
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	789b      	ldrb	r3, [r3, #2]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b07      	cmp	r3, #7
 8000824:	d00e      	beq.n	8000844 <MCAL_GPIO_INIT+0x6e>
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	789b      	ldrb	r3, [r3, #2]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b06      	cmp	r3, #6
 800082e:	d009      	beq.n	8000844 <MCAL_GPIO_INIT+0x6e>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	789b      	ldrb	r3, [r3, #2]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b05      	cmp	r3, #5
 8000838:	d004      	beq.n	8000844 <MCAL_GPIO_INIT+0x6e>
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	789b      	ldrb	r3, [r3, #2]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b04      	cmp	r3, #4
 8000842:	d110      	bne.n	8000866 <MCAL_GPIO_INIT+0x90>
	{

		PIN_Config =  ( (((pin_config->Mode - 4)  << 2) | (pin_config->Output_speed)) & 0x0f);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	789b      	ldrb	r3, [r3, #2]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	3b04      	subs	r3, #4
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	b25a      	sxtb	r2, r3
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	78db      	ldrb	r3, [r3, #3]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	b25b      	sxtb	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b25b      	sxtb	r3, r3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e03a      	b.n	80008dc <MCAL_GPIO_INIT+0x106>
	}
	else
	{
		if ( (pin_config->Mode == GPIO_MODE_ANALOG) || (pin_config->Mode == GPIO_MODE_INPUT_FLO) )
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d004      	beq.n	800087a <MCAL_GPIO_INIT+0xa4>
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	789b      	ldrb	r3, [r3, #2]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b01      	cmp	r3, #1
 8000878:	d108      	bne.n	800088c <MCAL_GPIO_INIT+0xb6>
		{
			PIN_Config =  ( (((pin_config->Mode)  << 2) | 0x0 ) & 0x0f);
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	789b      	ldrb	r3, [r3, #2]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f003 030f 	and.w	r3, r3, #15
 8000888:	73fb      	strb	r3, [r7, #15]
 800088a:	e027      	b.n	80008dc <MCAL_GPIO_INIT+0x106>
		}
		else if ( pin_config->Mode == GPIO_MODE_INTPUT_AF)
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	789b      	ldrb	r3, [r3, #2]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b08      	cmp	r3, #8
 8000894:	d102      	bne.n	800089c <MCAL_GPIO_INIT+0xc6>
		{
			PIN_Config =  ( (((GPIO_MODE_INPUT_FLO)  << 2) | 0x0 ) & 0x0f);
 8000896:	2304      	movs	r3, #4
 8000898:	73fb      	strb	r3, [r7, #15]
 800089a:	e01f      	b.n	80008dc <MCAL_GPIO_INIT+0x106>
		}
		else
		{
			PIN_Config =  ( (((GPIO_MODE_INPUT_PU)  << 2) | 0x0 ) & 0x0f);
 800089c:	2308      	movs	r3, #8
 800089e:	73fb      	strb	r3, [r7, #15]

			if ( pin_config->Mode == GPIO_MODE_INPUT_PU)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	789b      	ldrb	r3, [r3, #2]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d10c      	bne.n	80008c4 <MCAL_GPIO_INIT+0xee>
			{
				GPIOx->ODR |= 1 << pin_config->Pin_number;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	2301      	movs	r3, #1
 80008b4:	fa03 f202 	lsl.w	r2, r3, r2
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	431a      	orrs	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	e00b      	b.n	80008dc <MCAL_GPIO_INIT+0x106>
			}
			else
			{
				GPIOx->ODR &= ~(1 << pin_config->Pin_number);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	461a      	mov	r2, r3
 80008cc:	2301      	movs	r3, #1
 80008ce:	4093      	lsls	r3, r2
 80008d0:	43da      	mvns	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	401a      	ands	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*config) |=  ( (PIN_Config) << getposition(pin_config->Pin_number) );
 80008dc:	7bfc      	ldrb	r4, [r7, #15]
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff13 	bl	8000710 <getposition>
 80008ea:	4603      	mov	r3, r0
 80008ec:	fa04 f203 	lsl.w	r2, r4, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	431a      	orrs	r2, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	601a      	str	r2, [r3, #0]
}
 80008fa:	bf00      	nop
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd90      	pop	{r4, r7, pc}

08000902 <MCAL_GPIO_WRITE_PIN>:
 * @param [in]      - Pin_No: GPIOx PIN Number
 * @param [in]      - Value: The Input Value
 * @retval          - none
 * Note             - none
 *================================================================ */
void MCAL_GPIO_WRITE_PIN(GPIO_Typedef* GPIOx, uint16_t pin_number , uint8_t value) {
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	460b      	mov	r3, r1
 800090c:	807b      	strh	r3, [r7, #2]
 800090e:	4613      	mov	r3, r2
 8000910:	707b      	strb	r3, [r7, #1]

	if(value != GPIO_Pin_reset){
 8000912:	787b      	ldrb	r3, [r7, #1]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d003      	beq.n	8000920 <MCAL_GPIO_WRITE_PIN+0x1e>
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Set the corresponding ODRx bit
		 */

		GPIOx->BSRR = (uint32_t)pin_number;
 8000918:	887a      	ldrh	r2, [r7, #2]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	611a      	str	r2, [r3, #16]
		 */

		GPIOx->BRR = (uint32_t)pin_number;
	}

}
 800091e:	e002      	b.n	8000926 <MCAL_GPIO_WRITE_PIN+0x24>
		GPIOx->BRR = (uint32_t)pin_number;
 8000920:	887a      	ldrh	r2, [r7, #2]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	615a      	str	r2, [r3, #20]
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <MCAL_GPIO_WRITE_PORT>:
 * @param [in]      - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
 * @param [in]      - Value: The Input Value
 * @retval          - none
 * Note             - none
 *================================================================ */
void MCAL_GPIO_WRITE_PORT(GPIO_Typedef* GPIOx,uint16_t value) {
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	807b      	strh	r3, [r7, #2]

	GPIOx->ODR = (uint16_t)value;
 800093c:	887a      	ldrh	r2, [r7, #2]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	60da      	str	r2, [r3, #12]
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <_delay_ms>:
#include "STM32F103x8.h"


GPIO_Pinconfig_t config;

void _delay_ms(uint32_t time){
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	for(int i=0; i<time; i++){
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e00b      	b.n	8000972 <_delay_ms+0x26>
		for(int j=0; j<255; j++);
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	e002      	b.n	8000966 <_delay_ms+0x1a>
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	3301      	adds	r3, #1
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	2bfe      	cmp	r3, #254	; 0xfe
 800096a:	ddf9      	ble.n	8000960 <_delay_ms+0x14>
	for(int i=0; i<time; i++){
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3301      	adds	r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	429a      	cmp	r2, r3
 8000978:	d8ef      	bhi.n	800095a <_delay_ms+0xe>
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <LCD_clear_screen>:

void LCD_clear_screen(){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000988:	2001      	movs	r0, #1
 800098a:	f000 f9d1 	bl	8000d30 <LCD_WRITE_COMMAND>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <LCD_lcd_kick>:

void LCD_lcd_kick(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	//LCD_CTRL |= (1 << EN_SWITCH);
	MCAL_GPIO_WRITE_PIN(GPIOA, EN_SWITCH, 1);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099e:	4807      	ldr	r0, [pc, #28]	; (80009bc <LCD_lcd_kick+0x28>)
 80009a0:	f7ff ffaf 	bl	8000902 <MCAL_GPIO_WRITE_PIN>
	_delay_ms(50);
 80009a4:	2032      	movs	r0, #50	; 0x32
 80009a6:	f7ff ffd1 	bl	800094c <_delay_ms>
	//LCD_CTRL &= ~(1 << EN_SWITCH);
	MCAL_GPIO_WRITE_PIN(GPIOA, EN_SWITCH, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <LCD_lcd_kick+0x28>)
 80009b2:	f7ff ffa6 	bl	8000902 <MCAL_GPIO_WRITE_PIN>
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40010800 	.word	0x40010800

080009c0 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	460a      	mov	r2, r1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	4613      	mov	r3, r2
 80009ce:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d108      	bne.n	80009e8 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 80009d6:	79bb      	ldrb	r3, [r7, #6]
 80009d8:	2b0f      	cmp	r3, #15
 80009da:	d805      	bhi.n	80009e8 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	3b80      	subs	r3, #128	; 0x80
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f9a4 	bl	8000d30 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d108      	bne.n	8000a00 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d805      	bhi.n	8000a00 <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	3b40      	subs	r3, #64	; 0x40
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f998 	bl	8000d30 <LCD_WRITE_COMMAND>
		}
	}
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <LCD_INIT>:

void LCD_INIT(){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	_delay_ms(20);
 8000a0c:	2014      	movs	r0, #20
 8000a0e:	f7ff ff9d 	bl	800094c <_delay_ms>
	//DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
	config.Pin_number = EN_SWITCH;
 8000a12:	4b5b      	ldr	r3, [pc, #364]	; (8000b80 <LCD_INIT+0x178>)
 8000a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a18:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	4b59      	ldr	r3, [pc, #356]	; (8000b80 <LCD_INIT+0x178>)
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000a20:	4b57      	ldr	r3, [pc, #348]	; (8000b80 <LCD_INIT+0x178>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA, &config);
 8000a26:	4956      	ldr	r1, [pc, #344]	; (8000b80 <LCD_INIT+0x178>)
 8000a28:	4856      	ldr	r0, [pc, #344]	; (8000b84 <LCD_INIT+0x17c>)
 8000a2a:	f7ff fed4 	bl	80007d6 <MCAL_GPIO_INIT>


	config.Pin_number = RS_SWITCH;
 8000a2e:	4b54      	ldr	r3, [pc, #336]	; (8000b80 <LCD_INIT+0x178>)
 8000a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a34:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	4b52      	ldr	r3, [pc, #328]	; (8000b80 <LCD_INIT+0x178>)
 8000a38:	2204      	movs	r2, #4
 8000a3a:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000a3c:	4b50      	ldr	r3, [pc, #320]	; (8000b80 <LCD_INIT+0x178>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000a42:	494f      	ldr	r1, [pc, #316]	; (8000b80 <LCD_INIT+0x178>)
 8000a44:	484f      	ldr	r0, [pc, #316]	; (8000b84 <LCD_INIT+0x17c>)
 8000a46:	f7ff fec6 	bl	80007d6 <MCAL_GPIO_INIT>

	config.Pin_number = RW_SWITCH;
 8000a4a:	4b4d      	ldr	r3, [pc, #308]	; (8000b80 <LCD_INIT+0x178>)
 8000a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a50:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	4b4b      	ldr	r3, [pc, #300]	; (8000b80 <LCD_INIT+0x178>)
 8000a54:	2204      	movs	r2, #4
 8000a56:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000a58:	4b49      	ldr	r3, [pc, #292]	; (8000b80 <LCD_INIT+0x178>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000a5e:	4948      	ldr	r1, [pc, #288]	; (8000b80 <LCD_INIT+0x178>)
 8000a60:	4848      	ldr	r0, [pc, #288]	; (8000b84 <LCD_INIT+0x17c>)
 8000a62:	f7ff feb8 	bl	80007d6 <MCAL_GPIO_INIT>



	//LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
	MCAL_GPIO_WRITE_PIN(GPIOA, EN_SWITCH, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6c:	4845      	ldr	r0, [pc, #276]	; (8000b84 <LCD_INIT+0x17c>)
 8000a6e:	f7ff ff48 	bl	8000902 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(GPIOA, RS_SWITCH, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a78:	4842      	ldr	r0, [pc, #264]	; (8000b84 <LCD_INIT+0x17c>)
 8000a7a:	f7ff ff42 	bl	8000902 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(GPIOA, RW_SWITCH, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a84:	483f      	ldr	r0, [pc, #252]	; (8000b84 <LCD_INIT+0x17c>)
 8000a86:	f7ff ff3c 	bl	8000902 <MCAL_GPIO_WRITE_PIN>

	//DataDir_LCD_PORT = 0xFF;
	config.Pin_number = GPIOx_PIN0;
 8000a8a:	4b3d      	ldr	r3, [pc, #244]	; (8000b80 <LCD_INIT+0x178>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	4b3b      	ldr	r3, [pc, #236]	; (8000b80 <LCD_INIT+0x178>)
 8000a92:	2204      	movs	r2, #4
 8000a94:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <LCD_INIT+0x178>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000a9c:	4938      	ldr	r1, [pc, #224]	; (8000b80 <LCD_INIT+0x178>)
 8000a9e:	4839      	ldr	r0, [pc, #228]	; (8000b84 <LCD_INIT+0x17c>)
 8000aa0:	f7ff fe99 	bl	80007d6 <MCAL_GPIO_INIT>

	config.Pin_number = GPIOx_PIN1;
 8000aa4:	4b36      	ldr	r3, [pc, #216]	; (8000b80 <LCD_INIT+0x178>)
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <LCD_INIT+0x178>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000ab0:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <LCD_INIT+0x178>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000ab6:	4932      	ldr	r1, [pc, #200]	; (8000b80 <LCD_INIT+0x178>)
 8000ab8:	4832      	ldr	r0, [pc, #200]	; (8000b84 <LCD_INIT+0x17c>)
 8000aba:	f7ff fe8c 	bl	80007d6 <MCAL_GPIO_INIT>

	config.Pin_number = GPIOx_PIN2;
 8000abe:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <LCD_INIT+0x178>)
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <LCD_INIT+0x178>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <LCD_INIT+0x178>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000ad0:	492b      	ldr	r1, [pc, #172]	; (8000b80 <LCD_INIT+0x178>)
 8000ad2:	482c      	ldr	r0, [pc, #176]	; (8000b84 <LCD_INIT+0x17c>)
 8000ad4:	f7ff fe7f 	bl	80007d6 <MCAL_GPIO_INIT>


	config.Pin_number = GPIOx_PIN3;
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <LCD_INIT+0x178>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <LCD_INIT+0x178>)
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <LCD_INIT+0x178>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000aea:	4925      	ldr	r1, [pc, #148]	; (8000b80 <LCD_INIT+0x178>)
 8000aec:	4825      	ldr	r0, [pc, #148]	; (8000b84 <LCD_INIT+0x17c>)
 8000aee:	f7ff fe72 	bl	80007d6 <MCAL_GPIO_INIT>


	config.Pin_number = GPIOx_PIN4;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <LCD_INIT+0x178>)
 8000af4:	2210      	movs	r2, #16
 8000af6:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <LCD_INIT+0x178>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <LCD_INIT+0x178>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000b04:	491e      	ldr	r1, [pc, #120]	; (8000b80 <LCD_INIT+0x178>)
 8000b06:	481f      	ldr	r0, [pc, #124]	; (8000b84 <LCD_INIT+0x17c>)
 8000b08:	f7ff fe65 	bl	80007d6 <MCAL_GPIO_INIT>


	config.Pin_number = GPIOx_PIN5;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <LCD_INIT+0x178>)
 8000b0e:	2220      	movs	r2, #32
 8000b10:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <LCD_INIT+0x178>)
 8000b14:	2204      	movs	r2, #4
 8000b16:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <LCD_INIT+0x178>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000b1e:	4918      	ldr	r1, [pc, #96]	; (8000b80 <LCD_INIT+0x178>)
 8000b20:	4818      	ldr	r0, [pc, #96]	; (8000b84 <LCD_INIT+0x17c>)
 8000b22:	f7ff fe58 	bl	80007d6 <MCAL_GPIO_INIT>


	config.Pin_number = GPIOx_PIN6;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <LCD_INIT+0x178>)
 8000b28:	2240      	movs	r2, #64	; 0x40
 8000b2a:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <LCD_INIT+0x178>)
 8000b2e:	2204      	movs	r2, #4
 8000b30:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <LCD_INIT+0x178>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000b38:	4911      	ldr	r1, [pc, #68]	; (8000b80 <LCD_INIT+0x178>)
 8000b3a:	4812      	ldr	r0, [pc, #72]	; (8000b84 <LCD_INIT+0x17c>)
 8000b3c:	f7ff fe4b 	bl	80007d6 <MCAL_GPIO_INIT>


	config.Pin_number = GPIOx_PIN7;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <LCD_INIT+0x178>)
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <LCD_INIT+0x178>)
 8000b48:	2204      	movs	r2, #4
 8000b4a:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <LCD_INIT+0x178>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000b52:	490b      	ldr	r1, [pc, #44]	; (8000b80 <LCD_INIT+0x178>)
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <LCD_INIT+0x17c>)
 8000b56:	f7ff fe3e 	bl	80007d6 <MCAL_GPIO_INIT>


	_delay_ms(15);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f7ff fef6 	bl	800094c <_delay_ms>
	LCD_clear_screen();
 8000b60:	f7ff ff10 	bl	8000984 <LCD_clear_screen>

#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000b64:	2038      	movs	r0, #56	; 0x38
 8000b66:	f000 f8e3 	bl	8000d30 <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
	//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000b6a:	2006      	movs	r0, #6
 8000b6c:	f000 f8e0 	bl	8000d30 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000b70:	2080      	movs	r0, #128	; 0x80
 8000b72:	f000 f8dd 	bl	8000d30 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000b76:	200f      	movs	r0, #15
 8000b78:	f000 f8da 	bl	8000d30 <LCD_WRITE_COMMAND>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000005c 	.word	0x2000005c
 8000b84:	40010800 	.word	0x40010800

08000b88 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	//DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
	config.Pin_number = GPIOx_PIN0;
 8000b8c:	4b66      	ldr	r3, [pc, #408]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_INPUT_FLO ;
 8000b92:	4b65      	ldr	r3, [pc, #404]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000b98:	4963      	ldr	r1, [pc, #396]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000b9a:	4864      	ldr	r0, [pc, #400]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000b9c:	f7ff fe1b 	bl	80007d6 <MCAL_GPIO_INIT>

	config.Pin_number = GPIOx_PIN1;
 8000ba0:	4b61      	ldr	r3, [pc, #388]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_INPUT_FLO ;
 8000ba6:	4b60      	ldr	r3, [pc, #384]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000bac:	495e      	ldr	r1, [pc, #376]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000bae:	485f      	ldr	r0, [pc, #380]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000bb0:	f7ff fe11 	bl	80007d6 <MCAL_GPIO_INIT>

	config.Pin_number = GPIOx_PIN2;
 8000bb4:	4b5c      	ldr	r3, [pc, #368]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_INPUT_FLO ;
 8000bba:	4b5b      	ldr	r3, [pc, #364]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000bc0:	4959      	ldr	r1, [pc, #356]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000bc2:	485a      	ldr	r0, [pc, #360]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000bc4:	f7ff fe07 	bl	80007d6 <MCAL_GPIO_INIT>

	config.Pin_number = GPIOx_PIN3;
 8000bc8:	4b57      	ldr	r3, [pc, #348]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000bca:	2208      	movs	r2, #8
 8000bcc:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_INPUT_FLO ;
 8000bce:	4b56      	ldr	r3, [pc, #344]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000bd4:	4954      	ldr	r1, [pc, #336]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000bd6:	4855      	ldr	r0, [pc, #340]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000bd8:	f7ff fdfd 	bl	80007d6 <MCAL_GPIO_INIT>

	config.Pin_number = GPIOx_PIN4;
 8000bdc:	4b52      	ldr	r3, [pc, #328]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000bde:	2210      	movs	r2, #16
 8000be0:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_INPUT_FLO ;
 8000be2:	4b51      	ldr	r3, [pc, #324]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000be8:	494f      	ldr	r1, [pc, #316]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000bea:	4850      	ldr	r0, [pc, #320]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000bec:	f7ff fdf3 	bl	80007d6 <MCAL_GPIO_INIT>

	config.Pin_number = GPIOx_PIN5;
 8000bf0:	4b4d      	ldr	r3, [pc, #308]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_INPUT_FLO ;
 8000bf6:	4b4c      	ldr	r3, [pc, #304]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000bfc:	494a      	ldr	r1, [pc, #296]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000bfe:	484b      	ldr	r0, [pc, #300]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000c00:	f7ff fde9 	bl	80007d6 <MCAL_GPIO_INIT>

	config.Pin_number = GPIOx_PIN6;
 8000c04:	4b48      	ldr	r3, [pc, #288]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c06:	2240      	movs	r2, #64	; 0x40
 8000c08:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_INPUT_FLO ;
 8000c0a:	4b47      	ldr	r3, [pc, #284]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000c10:	4945      	ldr	r1, [pc, #276]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c12:	4846      	ldr	r0, [pc, #280]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000c14:	f7ff fddf 	bl	80007d6 <MCAL_GPIO_INIT>

	config.Pin_number = GPIOx_PIN7;
 8000c18:	4b43      	ldr	r3, [pc, #268]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_INPUT_FLO ;
 8000c1e:	4b42      	ldr	r3, [pc, #264]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000c24:	4940      	ldr	r1, [pc, #256]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c26:	4841      	ldr	r0, [pc, #260]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000c28:	f7ff fdd5 	bl	80007d6 <MCAL_GPIO_INIT>

	//LCD_CTRL |= (1 << RW_SWITCH);
	MCAL_GPIO_WRITE_PIN(GPIOA, RW_SWITCH, 1);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c32:	483e      	ldr	r0, [pc, #248]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000c34:	f7ff fe65 	bl	8000902 <MCAL_GPIO_WRITE_PIN>

	//LCD_CTRL &= ~(1 << RS_SWITCH);
	MCAL_GPIO_WRITE_PIN(GPIOA, RS_SWITCH, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3e:	483b      	ldr	r0, [pc, #236]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000c40:	f7ff fe5f 	bl	8000902 <MCAL_GPIO_WRITE_PIN>

	LCD_lcd_kick();
 8000c44:	f7ff fea6 	bl	8000994 <LCD_lcd_kick>

	//DataDir_LCD_PORT |= (0xFF<<DATA_shift);
	config.Pin_number = GPIOx_PIN0;
 8000c48:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c50:	2204      	movs	r2, #4
 8000c52:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000c54:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000c5a:	4933      	ldr	r1, [pc, #204]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c5c:	4833      	ldr	r0, [pc, #204]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000c5e:	f7ff fdba 	bl	80007d6 <MCAL_GPIO_INIT>

	config.Pin_number = GPIOx_PIN1;
 8000c62:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c64:	2202      	movs	r2, #2
 8000c66:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000c74:	492c      	ldr	r1, [pc, #176]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c76:	482d      	ldr	r0, [pc, #180]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000c78:	f7ff fdad 	bl	80007d6 <MCAL_GPIO_INIT>


	config.Pin_number = GPIOx_PIN2;
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c7e:	2204      	movs	r2, #4
 8000c80:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c84:	2204      	movs	r2, #4
 8000c86:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000c8e:	4926      	ldr	r1, [pc, #152]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c90:	4826      	ldr	r0, [pc, #152]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000c92:	f7ff fda0 	bl	80007d6 <MCAL_GPIO_INIT>


	config.Pin_number = GPIOx_PIN3;
 8000c96:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c98:	2208      	movs	r2, #8
 8000c9a:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000ca8:	491f      	ldr	r1, [pc, #124]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000caa:	4820      	ldr	r0, [pc, #128]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000cac:	f7ff fd93 	bl	80007d6 <MCAL_GPIO_INIT>

	config.Pin_number = GPIOx_PIN4;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000cb2:	2210      	movs	r2, #16
 8000cb4:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000cb8:	2204      	movs	r2, #4
 8000cba:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000cc2:	4919      	ldr	r1, [pc, #100]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000cc4:	4819      	ldr	r0, [pc, #100]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000cc6:	f7ff fd86 	bl	80007d6 <MCAL_GPIO_INIT>


	config.Pin_number = GPIOx_PIN5;
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000ccc:	2220      	movs	r2, #32
 8000cce:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000cdc:	4912      	ldr	r1, [pc, #72]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000cde:	4813      	ldr	r0, [pc, #76]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000ce0:	f7ff fd79 	bl	80007d6 <MCAL_GPIO_INIT>


	config.Pin_number = GPIOx_PIN6;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000ce6:	2240      	movs	r2, #64	; 0x40
 8000ce8:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000cf6:	490c      	ldr	r1, [pc, #48]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000cfa:	f7ff fd6c 	bl	80007d6 <MCAL_GPIO_INIT>


	config.Pin_number = GPIOx_PIN7;
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	801a      	strh	r2, [r3, #0]
	config.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000d06:	2204      	movs	r2, #4
 8000d08:	709a      	strb	r2, [r3, #2]
	config.Output_speed = GPIO_OUT_SPEED_10M;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(GPIOA,&config);
 8000d10:	4905      	ldr	r1, [pc, #20]	; (8000d28 <LCD_check_lcd_isbusy+0x1a0>)
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000d14:	f7ff fd5f 	bl	80007d6 <MCAL_GPIO_INIT>


	//LCD_CTRL &= ~(1 << RW_SWITCH);
	MCAL_GPIO_WRITE_PIN(GPIOA, RW_SWITCH, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1e:	4803      	ldr	r0, [pc, #12]	; (8000d2c <LCD_check_lcd_isbusy+0x1a4>)
 8000d20:	f7ff fdef 	bl	8000902 <MCAL_GPIO_WRITE_PIN>

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2000005c 	.word	0x2000005c
 8000d2c:	40010800 	.word	0x40010800

08000d30 <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 8000d3a:	f7ff ff25 	bl	8000b88 <LCD_check_lcd_isbusy>

	MCAL_GPIO_WRITE_PORT(GPIOA, (uint16_t) command);
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	4619      	mov	r1, r3
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <LCD_WRITE_COMMAND+0x44>)
 8000d46:	f7ff fdf3 	bl	8000930 <MCAL_GPIO_WRITE_PORT>
	//LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	MCAL_GPIO_WRITE_PIN(GPIOA, RS_SWITCH, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <LCD_WRITE_COMMAND+0x44>)
 8000d52:	f7ff fdd6 	bl	8000902 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(GPIOA, RW_SWITCH, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <LCD_WRITE_COMMAND+0x44>)
 8000d5e:	f7ff fdd0 	bl	8000902 <MCAL_GPIO_WRITE_PIN>
	_delay_ms(1);
 8000d62:	2001      	movs	r0, #1
 8000d64:	f7ff fdf2 	bl	800094c <_delay_ms>
	LCD_lcd_kick();
 8000d68:	f7ff fe14 	bl	8000994 <LCD_lcd_kick>
	LCD_lcd_kick ();
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	LCD_lcd_kick();
#endif
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40010800 	.word	0x40010800

08000d78 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 8000d82:	f7ff ff01 	bl	8000b88 <LCD_check_lcd_isbusy>

	//LCD_PORT = character;
	MCAL_GPIO_WRITE_PORT(GPIOA, ((uint8_t)character));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LCD_WRITE_CHAR+0x4c>)
 8000d8e:	f7ff fdcf 	bl	8000930 <MCAL_GPIO_WRITE_PORT>

	//LCD_CTRL &= ~(1 << RW_SWITCH);
	MCAL_GPIO_WRITE_PIN(GPIOA, RW_SWITCH, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d98:	480a      	ldr	r0, [pc, #40]	; (8000dc4 <LCD_WRITE_CHAR+0x4c>)
 8000d9a:	f7ff fdb2 	bl	8000902 <MCAL_GPIO_WRITE_PIN>

	//LCD_CTRL |= (1 << RS_SWITCH);
	MCAL_GPIO_WRITE_PIN(GPIOA, RS_SWITCH, 1);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da4:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <LCD_WRITE_CHAR+0x4c>)
 8000da6:	f7ff fdac 	bl	8000902 <MCAL_GPIO_WRITE_PIN>

	_delay_ms(1);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f7ff fdce 	bl	800094c <_delay_ms>
	LCD_lcd_kick();
 8000db0:	f7ff fdf0 	bl	8000994 <LCD_lcd_kick>
	_delay_ms(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fdc9 	bl	800094c <_delay_ms>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	LCD_lcd_kick ();
#endif
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40010800 	.word	0x40010800

08000dc8 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000dd4:	e01c      	b.n	8000e10 <LCD_WRITE_STRING+0x48>
		count++;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ffc7 	bl	8000d78 <LCD_WRITE_CHAR>
		if (count == 16)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2b10      	cmp	r3, #16
 8000dee:	d104      	bne.n	8000dfa <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 8000df0:	2100      	movs	r1, #0
 8000df2:	2002      	movs	r0, #2
 8000df4:	f7ff fde4 	bl	80009c0 <LCD_GOTO_XY>
 8000df8:	e00a      	b.n	8000e10 <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2b20      	cmp	r3, #32
 8000dfe:	d107      	bne.n	8000e10 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 8000e00:	f7ff fdc0 	bl	8000984 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 8000e04:	2100      	movs	r1, #0
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff fdda 	bl	80009c0 <LCD_GOTO_XY>
			count = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1de      	bne.n	8000dd6 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <wait_ms>:
#include "stm32f103x8_EXTI_driver.h"

unsigned int IRQ_Flag =0;


void wait_ms(int time){
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	for(int i=0; i<time; i++){
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e00b      	b.n	8000e46 <wait_ms+0x26>
		for(int j=0; j<255; j++);
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	e002      	b.n	8000e3a <wait_ms+0x1a>
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	3301      	adds	r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	2bfe      	cmp	r3, #254	; 0xfe
 8000e3e:	ddf9      	ble.n	8000e34 <wait_ms+0x14>
	for(int i=0; i<time; i++){
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dbef      	blt.n	8000e2e <wait_ms+0xe>
	}
}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <EXTI9_Callback>:

void EXTI9_Callback(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	IRQ_Flag =1;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <EXTI9_Callback+0x1c>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 is happened _|-");
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <EXTI9_Callback+0x20>)
 8000e64:	f7ff ffb0 	bl	8000dc8 <LCD_WRITE_STRING>
	wait_ms(2000);
 8000e68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e6c:	f7ff ffd8 	bl	8000e20 <wait_ms>


}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	2000001c 	.word	0x2000001c
 8000e78:	08000fb8 	.word	0x08000fb8

08000e7c <main>:
int main(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
	GPIOA_Clock_Enable();
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <main+0x78>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <main+0x78>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	6193      	str	r3, [r2, #24]
	GPIOB_Clock_Enable();
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <main+0x78>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4a18      	ldr	r2, [pc, #96]	; (8000ef4 <main+0x78>)
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	6193      	str	r3, [r2, #24]
	AFIO_Clock_Enable();
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <main+0x78>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <main+0x78>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6193      	str	r3, [r2, #24]
	LCD_INIT();
 8000ea6:	f7ff fdaf 	bl	8000a08 <LCD_INIT>
	LCD_clear_screen();
 8000eaa:	f7ff fd6b 	bl	8000984 <LCD_clear_screen>
	wait_ms(1000);
 8000eae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb2:	f7ff ffb5 	bl	8000e20 <wait_ms>
	LCD_clear_screen();
 8000eb6:	f7ff fd65 	bl	8000984 <LCD_clear_screen>

	EXTI_Pinconfig_t cfg;
	cfg.EXTI_PIN = EXTI9B9;
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <main+0x7c>)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ec0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	cfg.Trigger_case = EXTI_Trigger_Rising;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	743b      	strb	r3, [r7, #16]
	cfg.P_IRQ_Callback = EXTI9_Callback;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <main+0x80>)
 8000eca:	617b      	str	r3, [r7, #20]
	cfg.IRQ_EN = EXTI_IRQ_Enable;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_INIT(&cfg);
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fb00 	bl	80004d8 <MCAL_EXTI_GPIO_INIT>
	IRQ_Flag =1;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <main+0x84>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]

    /* Loop forever */
	while(1){
		if(IRQ_Flag){
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <main+0x84>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0fb      	beq.n	8000ede <main+0x62>
			LCD_clear_screen();
 8000ee6:	f7ff fd4d 	bl	8000984 <LCD_clear_screen>
			IRQ_Flag =0;
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <main+0x84>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag){
 8000ef0:	e7f5      	b.n	8000ede <main+0x62>
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	08000fd4 	.word	0x08000fd4
 8000efc:	08000e59 	.word	0x08000e59
 8000f00:	2000001c 	.word	0x2000001c

08000f04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f06:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0e:	490d      	ldr	r1, [pc, #52]	; (8000f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <LoopForever+0xe>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f24:	4c0a      	ldr	r4, [pc, #40]	; (8000f50 <LoopForever+0x16>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f32:	f000 f811 	bl	8000f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f36:	f7ff ffa1 	bl	8000e7c <main>

08000f3a <LoopForever>:

LoopForever:
    b LoopForever
 8000f3a:	e7fe      	b.n	8000f3a <LoopForever>
  ldr   r0, =_estack
 8000f3c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f48:	08000fe8 	.word	0x08000fe8
  ldr r2, =_sbss
 8000f4c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f50:	20000060 	.word	0x20000060

08000f54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC1_2_IRQHandler>
	...

08000f58 <__libc_init_array>:
 8000f58:	b570      	push	{r4, r5, r6, lr}
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	4e0c      	ldr	r6, [pc, #48]	; (8000f90 <__libc_init_array+0x38>)
 8000f5e:	4c0d      	ldr	r4, [pc, #52]	; (8000f94 <__libc_init_array+0x3c>)
 8000f60:	1ba4      	subs	r4, r4, r6
 8000f62:	10a4      	asrs	r4, r4, #2
 8000f64:	42a5      	cmp	r5, r4
 8000f66:	d109      	bne.n	8000f7c <__libc_init_array+0x24>
 8000f68:	f000 f81a 	bl	8000fa0 <_init>
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	4e0a      	ldr	r6, [pc, #40]	; (8000f98 <__libc_init_array+0x40>)
 8000f70:	4c0a      	ldr	r4, [pc, #40]	; (8000f9c <__libc_init_array+0x44>)
 8000f72:	1ba4      	subs	r4, r4, r6
 8000f74:	10a4      	asrs	r4, r4, #2
 8000f76:	42a5      	cmp	r5, r4
 8000f78:	d105      	bne.n	8000f86 <__libc_init_array+0x2e>
 8000f7a:	bd70      	pop	{r4, r5, r6, pc}
 8000f7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f80:	4798      	blx	r3
 8000f82:	3501      	adds	r5, #1
 8000f84:	e7ee      	b.n	8000f64 <__libc_init_array+0xc>
 8000f86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f8a:	4798      	blx	r3
 8000f8c:	3501      	adds	r5, #1
 8000f8e:	e7f2      	b.n	8000f76 <__libc_init_array+0x1e>
 8000f90:	08000fe0 	.word	0x08000fe0
 8000f94:	08000fe0 	.word	0x08000fe0
 8000f98:	08000fe0 	.word	0x08000fe0
 8000f9c:	08000fe4 	.word	0x08000fe4

08000fa0 <_init>:
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa2:	bf00      	nop
 8000fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa6:	bc08      	pop	{r3}
 8000fa8:	469e      	mov	lr, r3
 8000faa:	4770      	bx	lr

08000fac <_fini>:
 8000fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fae:	bf00      	nop
 8000fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fb2:	bc08      	pop	{r3}
 8000fb4:	469e      	mov	lr, r3
 8000fb6:	4770      	bx	lr
