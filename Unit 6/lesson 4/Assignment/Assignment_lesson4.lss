
Assignment_lesson4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  00000945  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f6  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000015c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000179d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_1>
   8:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_2>
   c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	//set intr0 to logical
	INT_MCUCR |= (1<<0);
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	96 b7       	in	r25, 0x36	; 54
  70:	81 60       	ori	r24, 0x01	; 1
  72:	96 bf       	out	0x36, r25	; 54
  74:	85 bf       	out	0x35, r24	; 53
	INT_MCUCR &= ~(1<<1);
  76:	85 b7       	in	r24, 0x35	; 53
  78:	96 b7       	in	r25, 0x36	; 54
  7a:	8d 7f       	andi	r24, 0xFD	; 253
  7c:	96 bf       	out	0x36, r25	; 54
  7e:	85 bf       	out	0x35, r24	; 53
	
	//set intr1 to rising
	INT_MCUCR |= (1<<2);
  80:	85 b7       	in	r24, 0x35	; 53
  82:	96 b7       	in	r25, 0x36	; 54
  84:	84 60       	ori	r24, 0x04	; 4
  86:	96 bf       	out	0x36, r25	; 54
  88:	85 bf       	out	0x35, r24	; 53
	INT_MCUCR |= (1<<3);
  8a:	85 b7       	in	r24, 0x35	; 53
  8c:	96 b7       	in	r25, 0x36	; 54
  8e:	88 60       	ori	r24, 0x08	; 8
  90:	96 bf       	out	0x36, r25	; 54
  92:	85 bf       	out	0x35, r24	; 53
	
	//set intr2 to falling 
	INT_MCUCSR &= ~(1<<6);
  94:	84 b7       	in	r24, 0x34	; 52
  96:	95 b7       	in	r25, 0x35	; 53
  98:	8f 7b       	andi	r24, 0xBF	; 191
  9a:	95 bf       	out	0x35, r25	; 53
  9c:	84 bf       	out	0x34, r24	; 52
	
	//enable interrupts 0,1,2
	INT_GICR |= (1<<5);
  9e:	8b b7       	in	r24, 0x3b	; 59
  a0:	9c b7       	in	r25, 0x3c	; 60
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	9c bf       	out	0x3c, r25	; 60
  a6:	8b bf       	out	0x3b, r24	; 59
	INT_GICR |= (1<<6);
  a8:	8b b7       	in	r24, 0x3b	; 59
  aa:	9c b7       	in	r25, 0x3c	; 60
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	9c bf       	out	0x3c, r25	; 60
  b0:	8b bf       	out	0x3b, r24	; 59
	INT_GICR |= (1<<7);
  b2:	8b b7       	in	r24, 0x3b	; 59
  b4:	9c b7       	in	r25, 0x3c	; 60
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	9c bf       	out	0x3c, r25	; 60
  ba:	8b bf       	out	0x3b, r24	; 59
	//directions of the leds as outputs
	DDRD |=(1<<5);
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	81 bb       	out	0x11, r24	; 17
	DDRD |=(1<<6);
  c2:	81 b3       	in	r24, 0x11	; 17
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	81 bb       	out	0x11, r24	; 17
	DDRD |=(1<<7);
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	81 bb       	out	0x11, r24	; 17
	
	sei();
  ce:	78 94       	sei
    while(1)
    {
		IO_PORTD &= ~(1<<5);
  d0:	82 b3       	in	r24, 0x12	; 18
  d2:	93 b3       	in	r25, 0x13	; 19
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	93 bb       	out	0x13, r25	; 19
  d8:	82 bb       	out	0x12, r24	; 18
		IO_PORTD &= ~(1<<6);
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	93 b3       	in	r25, 0x13	; 19
  de:	8f 7b       	andi	r24, 0xBF	; 191
  e0:	93 bb       	out	0x13, r25	; 19
  e2:	82 bb       	out	0x12, r24	; 18
		IO_PORTD &= ~(1<<7);
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	93 b3       	in	r25, 0x13	; 19
  e8:	8f 77       	andi	r24, 0x7F	; 127
  ea:	93 bb       	out	0x13, r25	; 19
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	f0 cf       	rjmp	.-32     	; 0xd0 <main+0x64>

000000f0 <__vector_1>:
    }
	

}

ISR(INT0_vect){
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
	IO_PORTD |= (1<<5);
 100:	82 b3       	in	r24, 0x12	; 18
 102:	93 b3       	in	r25, 0x13	; 19
 104:	80 62       	ori	r24, 0x20	; 32
 106:	93 bb       	out	0x13, r25	; 19
 108:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f e3       	ldi	r18, 0x3F	; 63
 10c:	8d e0       	ldi	r24, 0x0D	; 13
 10e:	93 e0       	ldi	r25, 0x03	; 3
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <__vector_1+0x20>
 118:	00 c0       	rjmp	.+0      	; 0x11a <__vector_1+0x2a>
 11a:	00 00       	nop
	_delay_ms(1000);
}
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <__vector_2>:
ISR(INT1_vect){
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	2f 93       	push	r18
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
	IO_PORTD |= (1<<6);
 13c:	82 b3       	in	r24, 0x12	; 18
 13e:	93 b3       	in	r25, 0x13	; 19
 140:	80 64       	ori	r24, 0x40	; 64
 142:	93 bb       	out	0x13, r25	; 19
 144:	82 bb       	out	0x12, r24	; 18
 146:	2f e3       	ldi	r18, 0x3F	; 63
 148:	8d e0       	ldi	r24, 0x0D	; 13
 14a:	93 e0       	ldi	r25, 0x03	; 3
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <__vector_2+0x20>
 154:	00 c0       	rjmp	.+0      	; 0x156 <__vector_2+0x2a>
 156:	00 00       	nop
	_delay_ms(1000);
}
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <__vector_3>:

ISR(INT2_vect){
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
	IO_PORTD |= (1<<7);
 178:	82 b3       	in	r24, 0x12	; 18
 17a:	93 b3       	in	r25, 0x13	; 19
 17c:	80 68       	ori	r24, 0x80	; 128
 17e:	93 bb       	out	0x13, r25	; 19
 180:	82 bb       	out	0x12, r24	; 18
 182:	2f e3       	ldi	r18, 0x3F	; 63
 184:	8d e0       	ldi	r24, 0x0D	; 13
 186:	93 e0       	ldi	r25, 0x03	; 3
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <__vector_3+0x20>
 190:	00 c0       	rjmp	.+0      	; 0x192 <__vector_3+0x2a>
 192:	00 00       	nop
	_delay_ms(1000);
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
